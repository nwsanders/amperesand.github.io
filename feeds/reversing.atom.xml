<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>sandcas.tl</title><link href="/" rel="alternate"></link><link href="/feeds/reversing.atom.xml" rel="self"></link><id>/</id><updated>2015-02-21T20:30:00+01:00</updated><entry><title>Simple X86-64 to C Translation</title><link href="/simple-x86-64-to-c-translation.html" rel="alternate"></link><updated>2015-02-21T20:30:00+01:00</updated><author><name>Nathan Sanders</name></author><id>tag:,2015-02-21:simple-x86-64-to-c-translation.html</id><summary type="html">&lt;p&gt;The other day I set up my blog using Pelican, a static site generator, and Github Pages, a service provided by Github to provide free hosting for simple webpages.  After picking a minimalistic theme and creating DNS records to point towards my custom domain, I felt it was time to start adding content.&lt;/p&gt;
&lt;p&gt;Recently I have been working through the reversing challenges hosted on wapiflapi's Github &lt;a class="reference external" href="https://github.com/wapiflapi/exrs"&gt;page&lt;/a&gt;.  In these challenges, you are provided a 64-bit ELF executable file with no source code or debugging symbols.  The objective is to find the password hidden in the executable.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;nathan@mint ~/exrs $ ./r1
Usage : ./r1 password
For this first exercice the password is stored in plaintext.
nathan@mint ~/exrs $ ./r1 password
password &amp;quot;password&amp;quot; not OK
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Running the executable with no parameters outputs the program usage, and the program reads a single parameter as a guess at the password.&lt;/p&gt;
&lt;p&gt;The first challenge is solved easily enough by running a simple &lt;code&gt;strings&lt;/code&gt; on the file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;...
UH-P
[]A\A]A^A_
my_password_to_easy
password OK
password &amp;quot;%s&amp;quot; not OK
Usage : %s password
For this first exercice the password is stored in plaintext.
;*3$&amp;quot;
...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, for the purpose of this post, I want to reconstruct the original C source code. To do this, I'll fire up the ever-trusty &lt;code&gt;gdb&lt;/code&gt; to analyze the structure of the executable.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;nathan@mint ~/exrs $ gdb r1
Reading symbols from r1...(no debugging symbols found)...done.
(gdb) break main
Breakpoint 1 at 0x400606
(gdb) run
Starting program: /home/nathan/exrs/r1

Breakpoint 1, 0x0000000000400606 in main ()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We start off by loading the executable &lt;code&gt;r1&lt;/code&gt; into &lt;code&gt;gdb&lt;/code&gt; with the command &lt;code&gt;gdb r1&lt;/code&gt;.  We want to start our analysis with the &lt;code&gt;main()&lt;/code&gt; function, so we follow up with a &lt;code&gt;disass&lt;/code&gt; command to generate the disassembly for our current frame.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;   (gdb) disass
   Dump of assembler code for function main:
   ; initialization
   0x0000000000400602 &amp;lt;+0&amp;gt;:   push   rbp
   0x0000000000400603 &amp;lt;+1&amp;gt;:   mov    rbp,rsp
=&amp;gt; 0x0000000000400606 &amp;lt;+4&amp;gt;:   sub    rsp,0x10
   0x000000000040060a &amp;lt;+8&amp;gt;:   mov    DWORD PTR [rbp-0x4],edi
   0x000000000040060d &amp;lt;+11&amp;gt;:  mov    QWORD PTR [rbp-0x10],rsi
   ; check number of arguments
   0x0000000000400611 &amp;lt;+15&amp;gt;:  cmp    DWORD PTR [rbp-0x4],0x2
   0x0000000000400615 &amp;lt;+19&amp;gt;:  je     0x400632 &amp;lt;main+48&amp;gt;
   ; if nargs is not 2
   0x0000000000400617 &amp;lt;+21&amp;gt;:  mov    rax,QWORD PTR [rbp-0x10]
   0x000000000040061b &amp;lt;+25&amp;gt;:  mov    rax,QWORD PTR [rax]
   0x000000000040061e &amp;lt;+28&amp;gt;:  mov    rsi,rax
   0x0000000000400621 &amp;lt;+31&amp;gt;:  mov    edi,0x400710
   0x0000000000400626 &amp;lt;+36&amp;gt;:  mov    eax,0x0
   0x000000000040062b &amp;lt;+41&amp;gt;:  call   0x400490 &amp;lt;printf@plt&amp;gt;
   0x0000000000400630 &amp;lt;+46&amp;gt;:  jmp    0x400645 &amp;lt;main+67&amp;gt;
   ; if nargs is 2
   0x0000000000400632 &amp;lt;+48&amp;gt;:  mov    rax,QWORD PTR [rbp-0x10]
   0x0000000000400636 &amp;lt;+52&amp;gt;:  add    rax,0x8
   0x000000000040063a &amp;lt;+56&amp;gt;:  mov    rax,QWORD PTR [rax]
   0x000000000040063d &amp;lt;+59&amp;gt;:  mov    rdi,rax
   0x0000000000400640 &amp;lt;+62&amp;gt;:  call   0x4005bd &amp;lt;compare_pwd&amp;gt;
   ; return 0
   0x0000000000400645 &amp;lt;+67&amp;gt;:  mov    eax,0x0
   0x000000000040064a &amp;lt;+72&amp;gt;:  leave
   0x000000000040064b &amp;lt;+73&amp;gt;:  ret
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Inside the disassembled main function, there are two function calls in main, one at &lt;code&gt;&amp;lt;+41&amp;gt;&lt;/code&gt; to &lt;code&gt;printf()&lt;/code&gt;, and another at &lt;code&gt;&amp;lt;+62&amp;gt;&lt;/code&gt; to &lt;code&gt;compare_pwd()&lt;/code&gt;.  Looking at the control flow, we see a &lt;code&gt;cmp - je&lt;/code&gt; instruction combination.  The &lt;code&gt;cmp&lt;/code&gt; instruction compares the value in &lt;code&gt;[rbp-0x4]&lt;/code&gt; with the immediate value &lt;code&gt;0x2&lt;/code&gt; - this is checking that the number of arguments passed into the &lt;code&gt;main()&lt;/code&gt; function is equal to 2. The following &lt;code&gt;je&lt;/code&gt; instruction passes the flow to another part of the code that calls the &lt;code&gt;compare_pwd()&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;Let's write a sample C program and see if we can reproduce the assembly code.
To control the program flow, I wrote a simple if-else statement checking if the number of arguments is equal to 2.  If so, I call the &lt;code&gt;compare_pwd()&lt;/code&gt; function, otherwise, I call &lt;code&gt;printf()&lt;/code&gt; and end the program.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;compare_pwd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;// empty for now&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;compare_pwd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Usage : %s password&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;For this first exercice the password is stored in plaintext.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Compiling with GNU gdb 7.7.1 and following similar steps to obtain the disassembly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Starting program: /home/nathan/exrs/r1a

Breakpoint 1, 0x000000000040053b in main ()
(gdb) disass
Dump of assembler code for function main:
   ; initialization
   0x0000000000400537 &amp;lt;+0&amp;gt;:   push   rbp
   0x0000000000400538 &amp;lt;+1&amp;gt;:   mov    rbp,rsp
=&amp;gt; 0x000000000040053b &amp;lt;+4&amp;gt;:   sub    rsp,0x10
   0x000000000040053f &amp;lt;+8&amp;gt;:   mov    DWORD PTR [rbp-0x4],edi
   0x0000000000400542 &amp;lt;+11&amp;gt;:  mov    QWORD PTR [rbp-0x10],rsi
   ; check number of arguments
   0x0000000000400546 &amp;lt;+15&amp;gt;:  cmp    DWORD PTR [rbp-0x4],0x2
   0x000000000040054a &amp;lt;+19&amp;gt;:  jne    0x400561 &amp;lt;main+42&amp;gt;
   ; if nargs is 2
   0x000000000040054c &amp;lt;+21&amp;gt;:  mov    rax,QWORD PTR [rbp-0x10]
   0x0000000000400550 &amp;lt;+25&amp;gt;:  add    rax,0x8
   0x0000000000400554 &amp;lt;+29&amp;gt;:  mov    rax,QWORD PTR [rax]
   0x0000000000400557 &amp;lt;+32&amp;gt;:  mov    rdi,rax
   0x000000000040055a &amp;lt;+35&amp;gt;:  call   0x40052d &amp;lt;compare_pwd&amp;gt;
   0x000000000040055f &amp;lt;+40&amp;gt;:  jmp    0x40057a &amp;lt;main+67&amp;gt;
   ; if nargs is not 2
   0x0000000000400561 &amp;lt;+42&amp;gt;:  mov    rax,QWORD PTR [rbp-0x10]
   0x0000000000400565 &amp;lt;+46&amp;gt;:  mov    rax,QWORD PTR [rax]
   0x0000000000400568 &amp;lt;+49&amp;gt;:  mov    rsi,rax
   0x000000000040056b &amp;lt;+52&amp;gt;:  mov    edi,0x400618
   0x0000000000400570 &amp;lt;+57&amp;gt;:  mov    eax,0x0
   0x0000000000400575 &amp;lt;+62&amp;gt;:  call   0x400410 &amp;lt;printf@plt&amp;gt;
   0x000000000040057a &amp;lt;+67&amp;gt;:  mov    eax,0x0
   0x000000000040057f &amp;lt;+72&amp;gt;:  leave
   0x0000000000400580 &amp;lt;+73&amp;gt;:  ret
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Interesting! Our statement &lt;code&gt;if(argc == 2)&lt;/code&gt; generated a &lt;code&gt;jne&lt;/code&gt; instruction, instead of testing for equality. This causes function calls to &lt;code&gt;compare_pwd()&lt;/code&gt; and &lt;code&gt;printf()&lt;/code&gt; be appear in a different order than they did in the original executable. Let's try using a slightly modified &lt;code&gt;main()&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Usage : %s password&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;For this first exercice the password is stored in plaintext.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;compare_pwd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Starting program: /home/nathan/exrs/r1b

Breakpoint 1, 0x000000000040053b in main ()
(gdb) disass
Dump of assembler code for function main:
   ; initialization
   0x0000000000400537 &amp;lt;+0&amp;gt;:   push   rbp
   0x0000000000400538 &amp;lt;+1&amp;gt;:   mov    rbp,rsp
=&amp;gt; 0x000000000040053b &amp;lt;+4&amp;gt;:   sub    rsp,0x10
   0x000000000040053f &amp;lt;+8&amp;gt;:   mov    DWORD PTR [rbp-0x4],edi
   0x0000000000400542 &amp;lt;+11&amp;gt;:  mov    QWORD PTR [rbp-0x10],rsi
   ; check number of arguments
   0x0000000000400546 &amp;lt;+15&amp;gt;:  cmp    DWORD PTR [rbp-0x4],0x2
   0x000000000040054a &amp;lt;+19&amp;gt;:  je     0x400567 &amp;lt;main+48&amp;gt;
   ; if nargs is 2
   0x000000000040054c &amp;lt;+21&amp;gt;:  mov    rax,QWORD PTR [rbp-0x10]
   0x0000000000400550 &amp;lt;+25&amp;gt;:  mov    rax,QWORD PTR [rax]
   0x0000000000400553 &amp;lt;+28&amp;gt;:  mov    rsi,rax
   0x0000000000400556 &amp;lt;+31&amp;gt;:  mov    edi,0x400618
   0x000000000040055b &amp;lt;+36&amp;gt;:  mov    eax,0x0
   0x0000000000400560 &amp;lt;+41&amp;gt;:  call   0x400410 &amp;lt;printf@plt&amp;gt;
   0x0000000000400565 &amp;lt;+46&amp;gt;:  jmp    0x40057a &amp;lt;main+67&amp;gt;
   ; if nargs is not 2
   0x0000000000400567 &amp;lt;+48&amp;gt;:  mov    rax,QWORD PTR [rbp-0x10]
   0x000000000040056b &amp;lt;+52&amp;gt;:  add    rax,0x8
   0x000000000040056f &amp;lt;+56&amp;gt;:  mov    rax,QWORD PTR [rax]
   0x0000000000400572 &amp;lt;+59&amp;gt;:  mov    rdi,rax
   0x0000000000400575 &amp;lt;+62&amp;gt;:  call   0x40052d &amp;lt;compare_pwd&amp;gt;
   0x000000000040057a &amp;lt;+67&amp;gt;:  mov    eax,0x0
   0x000000000040057f &amp;lt;+72&amp;gt;:  leave
   0x0000000000400580 &amp;lt;+73&amp;gt;:  ret
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Perfect! Our &lt;code&gt;main()&lt;/code&gt; function is similar to the original executable's.  Let's take a peek at the original &lt;code&gt;compare_pwd()&lt;/code&gt;, now.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Reading symbols from r1...(no debugging symbols found)...done.
(gdb) disass compare_pwd
Dump of assembler code for function compare_pwd:
   ; initialization
   0x00000000004005bd &amp;lt;+0&amp;gt;:   push   rbp
   0x00000000004005be &amp;lt;+1&amp;gt;:   mov    rbp,rsp
   0x00000000004005c1 &amp;lt;+4&amp;gt;:   sub    rsp,0x10
   0x00000000004005c5 &amp;lt;+8&amp;gt;:   mov    QWORD PTR [rbp-0x8],rdi
   0x00000000004005c9 &amp;lt;+12&amp;gt;:  mov    rax,QWORD PTR [rbp-0x8]
   ; compares passwords
   0x00000000004005cd &amp;lt;+16&amp;gt;:  mov    rsi,rax
   0x00000000004005d0 &amp;lt;+19&amp;gt;:  mov    edi,0x4006d8
   0x00000000004005d5 &amp;lt;+24&amp;gt;:  call   0x4004b0 &amp;lt;strcmp@plt&amp;gt;
   0x00000000004005da &amp;lt;+29&amp;gt;:  test   eax,eax
   0x00000000004005dc &amp;lt;+31&amp;gt;:  jne    0x4005ea &amp;lt;compare_pwd+45&amp;gt;
   ; if the passwords are the same
   0x00000000004005de &amp;lt;+33&amp;gt;:  mov    edi,0x4006ec
   0x00000000004005e3 &amp;lt;+38&amp;gt;:  call   0x400480 &amp;lt;puts@plt&amp;gt;
   0x00000000004005e8 &amp;lt;+43&amp;gt;:  jmp    0x400600 &amp;lt;compare_pwd+67&amp;gt;
   ; if the passwords are different
   0x00000000004005ea &amp;lt;+45&amp;gt;:  mov    rax,QWORD PTR [rbp-0x8]
   0x00000000004005ee &amp;lt;+49&amp;gt;:  mov    rsi,rax
   0x00000000004005f1 &amp;lt;+52&amp;gt;:  mov    edi,0x4006f8
   0x00000000004005f6 &amp;lt;+57&amp;gt;:  mov    eax,0x0
   0x00000000004005fb &amp;lt;+62&amp;gt;:  call   0x400490 &amp;lt;printf@plt&amp;gt;
   ; return to main
   0x0000000000400600 &amp;lt;+67&amp;gt;:  leave
   0x0000000000400601 &amp;lt;+68&amp;gt;:  ret
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we examine the memory location that was put into the &lt;code&gt;edi&lt;/code&gt; register, we can find out what message each function displays.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(gdb) x/s 0x4006ec
0x4006ec:   &amp;quot;password OK&amp;quot;
(gdb) x/s 0x4006f8
0x4006f8:   &amp;quot;password \&amp;quot;%s\&amp;quot; not OK\n&amp;quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So the &lt;code&gt;puts()&lt;/code&gt; is called when the password matches, and the &lt;code&gt;printf()&lt;/code&gt; otherwise. This also makes sense, since &lt;code&gt;printf()&lt;/code&gt; is called when the compared C-strings are not equal. Time to build a prototype in C!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;compare_pwd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strcmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;my_password_to_easy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;password OK&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;password &lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt; not OK&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Reading symbols from r1c...(no debugging symbols found)...done.
(gdb) disass compare_pwd
Dump of assembler code for function compare_pwd:
   0x00000000004005bd &amp;lt;+0&amp;gt;:   push   rbp
   0x00000000004005be &amp;lt;+1&amp;gt;:   mov    rbp,rsp
   0x00000000004005c1 &amp;lt;+4&amp;gt;:   sub    rsp,0x10
   0x00000000004005c5 &amp;lt;+8&amp;gt;:   mov    QWORD PTR [rbp-0x8],rdi
   0x00000000004005c9 &amp;lt;+12&amp;gt;:  mov    rax,QWORD PTR [rbp-0x8]
   ; swapped..!
   0x00000000004005cd &amp;lt;+16&amp;gt;:  mov    esi,0x4006d8
   0x00000000004005d2 &amp;lt;+21&amp;gt;:  mov    rdi,rax
   ;
   0x00000000004005d5 &amp;lt;+24&amp;gt;:  call   0x4004b0 &amp;lt;strcmp@plt&amp;gt;
   0x00000000004005da &amp;lt;+29&amp;gt;:  test   eax,eax
   0x00000000004005dc &amp;lt;+31&amp;gt;:  jne    0x4005ea &amp;lt;compare_pwd+45&amp;gt;
   0x00000000004005de &amp;lt;+33&amp;gt;:  mov    edi,0x4006ec
   0x00000000004005e3 &amp;lt;+38&amp;gt;:  call   0x400480 &amp;lt;puts@plt&amp;gt;
   0x00000000004005e8 &amp;lt;+43&amp;gt;:  jmp    0x400600 &amp;lt;compare_pwd+67&amp;gt;
   0x00000000004005ea &amp;lt;+45&amp;gt;:  mov    rax,QWORD PTR [rbp-0x8]
   0x00000000004005ee &amp;lt;+49&amp;gt;:  mov    rsi,rax
   0x00000000004005f1 &amp;lt;+52&amp;gt;:  mov    edi,0x4006f8
   0x00000000004005f6 &amp;lt;+57&amp;gt;:  mov    eax,0x0
   0x00000000004005fb &amp;lt;+62&amp;gt;:  call   0x400490 &amp;lt;printf@plt&amp;gt;
   0x0000000000400600 &amp;lt;+67&amp;gt;:  leave
   0x0000000000400601 &amp;lt;+68&amp;gt;:  ret
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Wow, almost got it exactly on the first try. If you look at lines &lt;code&gt;&amp;lt;+16&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;+21&amp;gt;&lt;/code&gt;, you'll notice that the arguments swapped.  Our prototype code moved the hardcoded password into the string source register, and the user-supplied password into the string destination register, while the original function did visa-versa.  However, this doesn't have any effect on the program's performance - we just reversed the order that the parameters that were passed into the function.  If we hadn't run strings on the code, we could check the memory location &lt;code&gt;0x4006d8&lt;/code&gt; to reveal the password:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(gdb) x/s 0x4006d8
0x4006d8:   &amp;quot;my_password_to_easy&amp;quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, we swap the parameters (&lt;code&gt;strcmp(&amp;quot;my_password_to_easy&amp;quot;, c)&lt;/code&gt;) and check the disassembly one last time.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;0x00000000004005cd &amp;lt;+16&amp;gt;:  mov    rsi,rax
0x00000000004005d0 &amp;lt;+19&amp;gt;:  mov    edi,0x4006d8
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Excellent! We're passing the arguments to &lt;code&gt;strcmp()&lt;/code&gt; in the correct order now, and we have an equivalent copy of the original code.&lt;/p&gt;
</summary><category term="x86-64"></category><category term="C"></category></entry></feed>